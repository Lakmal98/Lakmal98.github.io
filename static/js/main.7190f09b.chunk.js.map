{"version":3,"sources":["pages/Home.tsx","pages/Fiverr/Form.tsx","pages/Fiverr/Fiverr.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Home","className","useStyles","makeStyles","theme","root","flexGrow","margin","spacing","Form","useState","complexity","setComplexsity","roughBudget","setRoughBudget","getRoughBudget","lines","files","file","Math","ceil","calculateBudget","document","getElementById","value","handleChange","event","target","classes","CssBaseline","Container","maxWidth","style","fontSize","fontWeight","color","noValidate","autoComplete","Grid","item","xs","TextField","id","label","type","name","variant","onChange","Typography","gutterBottom","Slider","defaultValue","valueLabelDisplay","step","marks","min","max","getAriaValueText","display","htmlFor","Button","container","direction","justify","alignItems","marginTop","backgroundColor","onClick","location","href","Fiverr","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7190f09b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Home = (): JSX.Element => {\n  return (\n    <>\n      <div className=\"App\">\n        <header className=\"App-header\">Hi, I'm Dimuthu Lakmal</header>\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n","import React, { useState } from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport \"../../App.css\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nconst Form = (): JSX.Element => {\n  const [complexity, setComplexsity] = useState(0);\n  const [roughBudget, setRoughBudget] = useState(0);\n\n  // calculate the rough budget\n  const calculateBudget = (\n    lines: number = 0,\n    files: number = 0,\n    budget: number = 0\n  ) => {\n    let file = Math.ceil(lines / 500);\n    if (file <= 0) {\n      file = files;\n    }\n\n    if (file > 10) {\n      setComplexsity(10);\n    }\n\n    let roughBudget = 0;\n    if (file <= 5) {\n      roughBudget = file * 25;\n    } else {\n      roughBudget = file * 40;\n    }\n\n    return roughBudget;\n  };\n\n  // get the rough budget\n  const getRoughBudget = () => {\n    const lines = document.getElementById(\"lines\") as HTMLInputElement;\n    const lineCount = +lines.value;\n    const files = document.getElementById(\"files\") as HTMLInputElement;\n    const fileCount = +files.value;\n    const budget = document.getElementById(\"budget\") as HTMLInputElement;\n    const budgetCount = +budget.value;\n    const roughBudget = calculateBudget(lineCount, fileCount, budgetCount);\n    setRoughBudget(roughBudget);\n  };\n\n  // prevents the textField value getting below 0\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    if (+value < 0) {\n      event.target.value = \"0\";\n    }\n    getRoughBudget();\n  };\n\n  const getValueText = (value: number) => {\n    setComplexsity(value);\n    return `${value}`;\n  };\n\n  const classes = useStyles();\n  return (\n    <div className=\"inside-invert\">\n      <CssBaseline />\n      <Container maxWidth=\"sm\">\n        <h3>Budget Calculator</h3>\n        <div style={{ fontSize: \"12px\", fontWeight: \"bold\" }}>\n          * Enter the total number of lines of source code{\" \"}\n          <span style={{ color: \"blue\" }}>OR</span> the total files of source\n          code\n        </div>\n        <form className={classes.root} noValidate autoComplete=\"off\">\n          <Grid item xs={12}>\n            <TextField\n              id=\"lines\"\n              label=\"Number of lines of code\"\n              type=\"number\"\n              name=\"lines\"\n              variant=\"outlined\"\n              onChange={handleChange}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              id=\"files\"\n              label=\"Number of files of code\"\n              type=\"number\"\n              name=\"files\"\n              variant=\"outlined\"\n              onChange={handleChange}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Typography id=\"discrete-slider\" gutterBottom>\n              Select the complexity of the project\n            </Typography>\n            <Slider\n              defaultValue={10}\n              aria-labelledby=\"discrete-slider\"\n              valueLabelDisplay=\"auto\"\n              step={1}\n              marks\n              min={1}\n              max={10}\n              getAriaValueText={getValueText}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              id=\"budget\"\n              label=\"Your budget\"\n              type=\"number\"\n              name=\"budget\"\n              variant=\"outlined\"\n              onChange={handleChange}\n              style={{ display: \"none\" }}\n            />\n          </Grid>\n\n          <Grid item xs={12}>\n            <label htmlFor=\"\">Rough budget needs : </label>\n            <Button variant=\"contained\" color=\"primary\" id=\"roughBudget\">\n              {complexity\n                ? Math.ceil(roughBudget / ((1 / complexity) * 5))\n                : Math.ceil(roughBudget)}{\" \"}\n              $ (USD)\n            </Button>\n          </Grid>\n        </form>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          <Grid item xs={12}>\n            <div\n              style={{\n                fontSize: \"12px\",\n                fontWeight: \"bold\",\n                marginTop: \"1rem\",\n              }}\n            >\n              Have more questions? Feel free to contact me at{\" \"}\n            </div>\n          </Grid>\n          <Grid item xs={12}>\n            <Button\n              variant=\"contained\"\n              style={{\n                backgroundColor: \"#1dbf73\",\n                color: \"#fff\",\n              }}\n              onClick={() =>\n                (document.location.href =\n                  \"https://www.fiverr.com/inbox/lakmalepp\")\n              }\n            >\n              Go to fiverr inbox\n            </Button>\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\nimport Form from \"./Form\";\n\nconst Fiverr = (): JSX.Element => {\n  return (\n    <>\n      <div className=\"App App-header\">\n        <Form />\n      </div>\n    </>\n  );\n};\n\nexport default Fiverr;\n","import React from \"react\";\nimport \"./App.css\";\nimport { HashRouter, Route, Routes } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Fiverr from \"./pages/Fiverr/Fiverr\";\n\nfunction App() {\n  return (\n    <>\n      <HashRouter>\n        <Routes>\n          <Route path=\"/fiverr\" element={<Fiverr />} />\n          <Route path=\"/\" element={<Home />} />\n        </Routes>\n      </HashRouter>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}